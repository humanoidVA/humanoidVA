import credentials
import os
import google.generativeai as genai
from gtts import gTTS
from pydub import AudioSegment
from pydub.playback import play
import speech_recognition as sr
import re
import RPi.GPIO as GPIO
import time

# Servo motor setup
SERVO_PIN = 17  # Adjust based on your servo setup
GPIO.setmode(GPIO.BCM)
GPIO.setup(SERVO_PIN, GPIO.OUT)
pwm = GPIO.PWM(SERVO_PIN, 50)  # Set PWM frequency to 50Hz
pwm.start(0)

# Function to rotate servo
def rotate_servo(angle):
    duty_cycle = 2 + (angle / 18)
    GPIO.output(SERVO_PIN, True)
    pwm.ChangeDutyCycle(duty_cycle)
    time.sleep(0.5)
    GPIO.output(SERVO_PIN, False)
    pwm.ChangeDutyCycle(0)

# Adjust playback speed of the audio
def adjust_audio_speed(audio_file, speed_factor=1.5):
    audio = AudioSegment.from_file(audio_file)
    # Adjust speed by modifying the frame rate
    faster_audio = audio._spawn(audio.raw_data, overrides={
        "frame_rate": int(audio.frame_rate * speed_factor)
    }).set_frame_rate(audio.frame_rate)
    faster_audio.export(audio_file, format="mp3")  # Overwrite the file

def main():
    recognizer = sr.Recognizer()

    try:
        # Configure API key
        genai.configure(api_key=credentials.api_key)

        # Define generation configuration for the model
        generation_config = {
            "temperature": 0.7,
            "top_p": 0.95,
            "top_k": 64,
            "max_output_tokens": 8192,
            "response_mime_type": "text/plain",
        }

        # Create and configure the model
        model = genai.GenerativeModel(
            model_name="gemini-1.5-flash",
            generation_config=generation_config,
        )

        # Start a chat session
        chat_session = model.start_chat(history=[])

        print("Adjusting for ambient noise...")
        with sr.Microphone() as source:
            recognizer.adjust_for_ambient_noise(source)

        while True:
            try:
                with sr.Microphone() as source:
                    print("Listening...")
                    audio = recognizer.listen(source, timeout=5, phrase_time_limit=10)

                try:
                    user_input = recognizer.recognize_google(audio)
                    print(f"You said: {user_input}")

                    # Trigger on "Hello Jarvis"
                    if "hello jarvis" not in user_input.lower():
                        print("Wake word 'Hello Jarvis' not detected. Listening again...")
                        continue

                    # Check for specific servo control commands
                    if "open" in user_input.lower():
                        print("Rotating servo to 180 degrees...")
                        rotate_servo(180)
                        continue
                    elif "close" in user_input.lower():
                        print("Rotating servo to 0 degrees...")
                        rotate_servo(0)
                        continue
                    elif "shut down" in user_input.lower():
                        print("Shutting down...")
                        break

                    print("Generating answer using AI...")
                    response_length = 40
                    response = chat_session.send_message(user_input + f" less than {response_length} words")

                    cleaned_text = re.sub(r'[*]', '', response.text)
                    print(f"Answer generated by AI: {cleaned_text}")
                    answer = cleaned_text

                    # Generate TTS audio
                    tts = gTTS(answer)
                    audio_file = "response.mp3"
                    tts.save(audio_file)

                    # Adjust the speed of the generated audio
                    adjust_audio_speed(audio_file, speed_factor=1.5)  # 1.5x speed

                    # Play the adjusted audio
                    play(AudioSegment.from_file(audio_file))
                    os.remove(audio_file)

                except sr.UnknownValueError:
                    print("Sorry, I could not understand the audio. Please try again.")
                except sr.RequestError as e:
                    print(f"Could not request results from Google Speech Recognition service; {e}")
                except sr.WaitTimeoutError:
                    print("Listening timed out. Please speak louder or clearer.")

            except sr.WaitTimeoutError:
                print("Timeout waiting for input, continuing to listen...")

            except KeyboardInterrupt:
                print("Exiting...")
                break

    except Exception as e:
        print(f"An error occurred: {e}")
    
    finally:
        pwm.stop()
        GPIO.cleanup()

if __name__ == "__main__":
    main()
